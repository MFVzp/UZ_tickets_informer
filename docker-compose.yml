version: '3'
services:

   db:
     image: postgres:9.6
     networks:
       - tic
     deploy:
       placement:
         constraints: [node.role == manager]

   rabbitmq:
     image: rabbitmq:3
     environment:
       - RABBITMQ_DEFAULT_USER=guest
       - RABBITMQ_DEFAULT_PASS=guest
     networks:
       - tic
     deploy:
       placement:
         constraints: [node.role == manager]

   app:
     image: tauruszpua/uzt:django_app
     deploy:
       restart_policy:
         condition: on-failure
     command: /site/docker-utils/app-start.sh
     volumes:
       - .:/site/proj/
       - static-volume:/site/htdocs/static/
     environment:
       - ENV=PROD
       - DATABASE_URL=postgres://postgres@db/postgres
       - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
       - SITE_DIR=/site/
       - PROJECT_NAME=UkrZ
       - DJANGO_DEBUG=True
     depends_on:
       - rabbitmq
     networks:
       - tic

   worker:
     image: tauruszpua/uzt:celery_app
     command: /site/env/bin/celery worker -A UkrZ --workdir /site/proj/ -l info
     volumes:
       - .:/site/proj/
       - static-volume:/site/htdocs/static/
     environment:
       - DATABASE_URL=postgres://postgres@db/postgres
       - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
       - SITE_DIR=/site/
       - PROJECT_NAME=UkrZ
       - DJANGO_DEBUG=False
     depends_on:
       - rabbitmq
     networks:
       - tic

   web:
     image: nginx:1.11
     ports:
       - "80:80"
       - "443:443"
     depends_on:
       - app
     volumes:
       - ./docker-utils/nginx/default.template.conf:/root/default.template.conf
       - ./docker-utils/ssl/:/site/ssl/
       - static-volume:/static
     command: /bin/bash -c "envsubst '$$NGINX_HTTP_PORT $$NGINX_HTTPS_PORT' < /root/default.template.conf > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
     environment:
       - NGINX_HOST=foobar.com
       - NGINX_HTTP_PORT=80
       - NGINX_HTTPS_PORT=443
     networks:
       - tic
     deploy:
       placement:
         constraints: [node.role == manager]

   visualizer:
     image: dockersamples/visualizer:stable
     ports:
       - "8080:8080"
     volumes:
       - "/var/run/docker.sock:/var/run/docker.sock"
     deploy:
       placement:
         constraints: [node.role == manager]
     networks:
       - tic

networks:
  tic:

volumes:
  static-volume:
